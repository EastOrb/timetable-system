service: () -> {
    changeUserRole: (text, variant {Instructor; Student; Admin}) -> (variant {Ok:record {id:text; username:text; owner:principal; password:text; role:variant {Instructor; Student; Admin}; created_at:text; email:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createAutoTimetable: () -> (variant {Ok:vec record {id:text; time_slot:text; classroom_id:text; course_id:text; instructor_id:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createClassroom: (record {equipment:text; name:text; capacity:nat64}) -> (variant {Ok:record {id:text; equipment:text; name:text; capacity:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createCourse: (record {prerequisites:vec text; duration_years:nat64; name:text; required_equipment:text}) -> (variant {Ok:record {id:text; prerequisites:vec text; duration_years:nat64; name:text; required_equipment:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createInstructor: (record {name:text; availability:vec text; preferred_times:vec text}) -> (variant {Ok:record {id:text; name:text; availability:vec text; preferred_times:vec text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createTimetable: (record {time_slot:text; classroom_id:text; course_id:text; instructor_id:text}) -> (variant {Ok:record {id:text; time_slot:text; classroom_id:text; course_id:text; instructor_id:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    createUser: (record {username:text; password:text; role:variant {Instructor; Student; Admin}; email:text}) -> (variant {Ok:record {id:text; username:text; owner:principal; password:text; role:variant {Instructor; Student; Admin}; created_at:text; email:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}});
    getAvailableInstructors: (text) -> (variant {Ok:vec record {id:text; name:text; availability:vec text; preferred_times:vec text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getClassrooms: () -> (variant {Ok:vec record {id:text; equipment:text; name:text; capacity:nat64}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getCourseByName: (text) -> (variant {Ok:record {id:text; prerequisites:vec text; duration_years:nat64; name:text; required_equipment:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getCourses: () -> (variant {Ok:vec record {id:text; prerequisites:vec text; duration_years:nat64; name:text; required_equipment:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getInstructorByName: (text) -> (variant {Ok:record {id:text; name:text; availability:vec text; preferred_times:vec text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getInstructors: () -> (variant {Ok:vec record {id:text; name:text; availability:vec text; preferred_times:vec text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getTimetables: () -> (variant {Ok:vec record {id:text; time_slot:text; classroom_id:text; course_id:text; instructor_id:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getUser: (text) -> (variant {Ok:record {id:text; username:text; owner:principal; password:text; role:variant {Instructor; Student; Admin}; created_at:text; email:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getUserByEmail: (text) -> (variant {Ok:record {id:text; username:text; owner:principal; password:text; role:variant {Instructor; Student; Admin}; created_at:text; email:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getUserByUsername: (text) -> (variant {Ok:record {id:text; username:text; owner:principal; password:text; role:variant {Instructor; Student; Admin}; created_at:text; email:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
    getUsers: () -> (variant {Ok:vec record {id:text; username:text; owner:principal; password:text; role:variant {Instructor; Student; Admin}; created_at:text; email:text}; Err:variant {Error:text; InvalidPayload:text; NotFound:text; Success:text}}) query;
}
